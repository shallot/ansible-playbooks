#!/usr/bin/env python3
# Copyright (c) 2020-present eyeo GmbH
#
# This module is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import csv
import datetime
import geoip2.database
import io
import json
import re
import sys


# https://github.com/SpiderLabs/ModSecurity/wiki/Reference-Manual-%28v2.x%29#secauditlogparts
AUDIT_LOG_SEGMENT_HEADER = 'A'
AUDIT_LOG_SEGMENT_REQUEST_HEADERS = 'B'
AUDIT_LOG_SEGMENT_REQUEST_BODY = 'C'
AUDIT_LOG_SEGMENT_RESERVED = 'D'
AUDIT_LOG_SEGMENT_RESPONSE_BODY = 'E'
AUDIT_LOG_SEGMENT_RESPONSE_HEADERS = 'F'
AUDIT_LOG_SEGMENT_ACTUAL_RESPONSE_BODY = 'G'
AUDIT_LOG_SEGMENT_TRAILER = 'H'
AUDIT_LOG_SEGMENT_REQUEST_FIELDS = 'I'
AUDIT_LOG_SEGMENT_REQUEST_FILES = 'J'
AUDIT_LOG_SEGMENT_RULES_MATCHED = 'K'
AUDIT_LOG_SEGMENT_COMPLETE = 'Z'

AUDIT_LOG_PATTERN = re.compile('^--([a-z0-9]{6,12})-([A-Z])--$')
AUDIT_LOG_DATE_FORMAT = '%d/%b/%Y:%H:%M:%S'


CSV_FIELDS = [
    'timestamp',
    'key',
    'acceptable_ads',
    'rti',
    'first_ping_token',
    'last_ping_token',
    'response_token',
    'application_version',
    'country_code'
]


geoip = geoip2.database.Reader('/var/lib/GeoIP/GeoLite2-Country.mmdb')


class Record():
    __slots__ = (
        'key',
        'timestamp',
        'request_body',
        'response_body',
        'ip'
    )

    def __init__(self, key):
        self.key = key
        self.request_body = []
        self.response_body = []

    def set_timestamp(self, string, pattern=AUDIT_LOG_DATE_FORMAT):
        self.timestamp = datetime.datetime.strptime(string, pattern)

    @property
    def country_code(self):
        try:
            code = geoip.country(self.ip).country.iso_code
        except Exception as error:
            print(self.key, error, file=sys.stderr, sep=": ")
            code = ""
        return code

    @property
    def data(self):
        return json.loads(self.request_body[0])['data']

    @property
    def response_data(self):
        if self.response_body:
            return json.loads(self.response_body[0])
        print(self.key, 'no response_token as there is no body', file=sys.stderr, sep=": ")
        return json.loads('{}')

    @property
    def dict(self):
        data = self.data
        data['timestamp'] = self.timestamp.strftime('%Y-%m-%d %H:%M:%S')
        data['key'] = self.key
        data['response_token'] = self._strip_token(self.response_data.get('token'))
        data['country_code'] = self.country_code
        data['first_ping_token'] = self._strip_token(data['first_ping_token'])
        data['last_ping_token'] = self._strip_token(data['last_ping_token'])
        return data

    def _strip_token(self, token):
        if token is None:
            result = None
        else:
            result = token.replace('T', ' ')
            result = result.replace('Z', '')
            result = result.replace(',', '.')
            result = result[:26]
        return result




records_processing = {}
records_last = None
records_last_segment = None

writer = csv.DictWriter(sys.stdout, fieldnames=CSV_FIELDS, extrasaction='ignore')
writer.writeheader()


def report_record(record):
    try:
        writer.writerow(record.dict)
    except IndexError as error:
        print(record.key, 'no request body', error, file=sys.stderr, sep=": ")
        pass # ignored because with no request body, this is not useful at all
    except Exception as error:
        print(record.key, error, file=sys.stderr, sep=": ")
        print(record.key, record.request_body, file=sys.stderr, sep=": ")


reader = io.TextIOWrapper(sys.stdin.buffer, encoding='utf-8', errors='replace')

for line in reader:

    match = AUDIT_LOG_PATTERN.match(line)

    if match:

        key = match.group(1)
        records_last_segment = match.group(2)

        if records_last_segment == AUDIT_LOG_SEGMENT_COMPLETE:
            # if debug:
            #     print('Completed state', '{}'.format(records_last_segment), line, file=sys.stderr, sep=": ")
            records_last = records_processing.pop(key, None)
            if records_last is not None:
                # if debug:
                #     print('Non-empty record in AUDIT_LOG_SEGMENT_COMPLETE found', line, file=sys.stderr, sep=": ")
                report_record(records_last)
            #else:
            #    if debug:
            #        print('Empty record in AUDIT_LOG_SEGMENT_COMPLETE found', line, file=sys.stderr, sep=": ")
            continue

        if records_last_segment == AUDIT_LOG_SEGMENT_HEADER:
            records_last = Record(key)
            records_processing[key] = records_last
            continue

        records_last = records_processing.get(key)

    elif records_last is not None:

        if records_last_segment == AUDIT_LOG_SEGMENT_HEADER:
            try:
                parts = line.split()
                records_last.ip = parts[3]
                records_last.set_timestamp(parts[0][1:])
            except Exception as error:
                print(records_last.key, error, file=sys.stderr, sep=": ")
                print(records_last.key, records_last.request_body, file=sys.stderr, sep=": ")
            continue

        if records_last_segment == AUDIT_LOG_SEGMENT_REQUEST_BODY:
            records_last.request_body.append(line)
            continue

        if records_last_segment == AUDIT_LOG_SEGMENT_RESPONSE_BODY:
            if not line.isspace():
                # if debug:
                #     print(records_last.key, 'Non-empty line in AUDIT_LOG_SEGMENT_RESPONSE_BODY found: {}'.format(line), file=sys.stderr, sep=": ")
                records_last.response_body.append(line)
            else:
                print(records_last.key, 'request body segment empty', file=sys.stderr, sep=": ")
