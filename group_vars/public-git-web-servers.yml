# Copyright (c) 2020-2023 eyeo GmbH
#
# This module is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

---

# tasks/packages.yml
public_git_web_custom_packages__to_merge:
  cgit: "present"

# tasks/paths.yml
public_git_web_custom_paths__to_merge:
  /usr/local/sbin/deploy_public_git_web:
    state: "copy"
    dest: "/usr/local/sbin/deploy_public_git_web"
    mode: "0755"
    content: |
      #!/bin/sh -ex
      for DEST_GIT_DIR in $@; do
        test -d "$DEST_GIT_DIR" || exit 1
        cd "$DEST_GIT_DIR"
        git fetch --all --tags --prune
        git update-server-info
      done
  /usr/local/sbin/deploy_public_git_web_branch:
    state: "copy"
    mode: "0755"
    content: |
      #!/bin/sh -ex
      if [ "$#" -lt 2 ]; then
        echo "script requires arguments"
        echo "first the branch name, then one or more directories" >&2
        exit 1
      fi
      case "$1" in
        *[^A-Za-z0-9._-]*) echo "unsupported branch name: $1" >&2
                        exit 1
                        ;;
      esac
      DEST_GIT_BRANCH=$1
      shift
      for DEST_GIT_DIR in $@; do
        test -d "$DEST_GIT_DIR" || exit 1
        cd "$DEST_GIT_DIR"
        git fetch --tags --prune
        git fetch --force \
                  origin \
                  $DEST_GIT_BRANCH:$DEST_GIT_BRANCH
        git update-server-info
        test -n "$CI_DEFAULT_BRANCH" || continue
        git_default_branch=$(git symbolic-ref --short HEAD)
        test "$git_default_branch" != "$CI_DEFAULT_BRANCH" || continue
        git symbolic-ref HEAD refs/heads/"$CI_DEFAULT_BRANCH"
      done
