# Copyright (c) 2020-2023 eyeo GmbH
#
# This module is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

---

# action_plugins/merge_variable.py
- name:
    "merge_variable : custom_authorized_keys"
  merge_variable:
    default: {}
    name: "custom_authorized_keys"
    suffix: "{{ custom_authorized_keys_suffix
              | default('custom_authorized_keys__to_merge') }}"

# https://docs.ansible.com/ansible/latest/modules/authorized_key_module.html
- name:
    "authorized_key"
  authorized_key:
    comment: "{{ authorized_key.value.comment | default(omit) }}"
    exclusive: "{{ authorized_key.value.exclusive | default(omit) }}"
    follow: "{{ authorized_key.value.follow | default(omit) }}"
    key: "{{ authorized_key.value.key | mandatory }}"
    key_options:
      "{{ authorized_key.value.key_options | default('') | join(',')
        | default(omit, true)
      }}"
    manage_dir: "{{ authorized_key.value.manage_dir | default(omit) }}"
    path: "{{ authorized_key.value.path | default(omit) }}"
    state: "{{ authorized_key.value.state | default(omit) }}"
    user: "{{ authorized_key.value.user | mandatory }}"
    validate_certs: "{{ authorized_key.value.validate_certs | default(omit) }}"
  loop:
    "{{ custom_authorized_keys | dict2items }}"
  loop_control:
    loop_var: "authorized_key"
  when:
    - "authorized_key.value.key is defined"
    - "authorized_key.value.key != omit"
  become:
    true
  register:
    "authorized_keys"

- name:
    "authorized_keys: validate"
  command:
    cmd: "ssh-keygen -l -f {{ authorized_key.keyfile }}"
  loop:
    "{{ authorized_keys.results }}"
  loop_control:
    loop_var: "authorized_key"
  when:
    "authorized_key.changed"
  become:
    true
